{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js"],"names":["ErrorMessage","src","img","style","display","width","height","objectFit","margin","alt","useHttp","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useMarvelService","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getCharacter","id","getAllComics","_transformComics","getComic","char","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","Skeleton","className","setContent","Component","Spinner","View","imgStyle","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","index","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","includes","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","preventDefault","key","TransitionGroup","component","renderItems","disabled","com","i","CharInfo","charId","ErrorBoundary","state","error","errorInfo","this","setState","children","CharSearchForm","errorMessage","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","setSelectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/6.646165fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img src={img} style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} alt='Error'/>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;","import {useState, useCallback} from \"react\";\r\n\r\nconst useHttp = () => {\r\n  const [process, setProcess] = useState('waiting')\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n    setProcess('loading')\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status:${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n\r\n      return data\r\n    } catch (e) {\r\n      setProcess('error')\r\n      throw e;\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setProcess('loading'), [])\r\n\r\n  return {request, clearError, process, setProcess}\r\n}\r\n\r\n\r\nexport default useHttp;","import useHttp from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const {process, request, clearError, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=008af015b2b2d7a8ef807f7c3395db16';\r\n  const _baseOffset = 228\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n    return _transformCharacter(res.data.results[0])\r\n  }\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n    return res.data.results.map(_transformComics)\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n    console.log(_transformComics(res.data.results[0]))\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description,\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n    }\r\n  }\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    getCharacter,\r\n    getAllCharacters,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName\r\n  }\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\n\r\nconst setContent =(process,Component, data)=>{\r\n  switch (process){\r\n    case 'waiting':\r\n      return <Skeleton/>;\r\n    case 'loading':\r\n      return <Spinner/>;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage/>;\r\n    default:\r\n      throw new Error('Unexpected process state')\r\n  }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport {useEffect, useState} from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({})\n  const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n  useEffect(() => {\n    updateChar()\n  }, [])\n\n  const onCharLoaded = (char) => {\n    setChar(char)\n  }\n\n  const updateChar = () => {\n    clearError()\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(()=>setProcess('confirmed'))\n  }\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!<br/>\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">\n          Or choose another one\n        </p>\n        <button className=\"button button__main\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n      </div>\n    </div>\n  )\n}\n\nconst View = ({data}) => {\n  const {name, description, thumbnail, homepage, wiki} = data;\n  let imgStyle = {'objectFit' : 'cover'};\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = {'objectFit' : 'contain'};\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">\n          {description}\n        </p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RandomChar;","import './charList.scss';\nimport {useState, useEffect, useRef, useMemo} from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport PropTypes from \"prop-types\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner/>;\n    case 'loading':\n      return newItemLoading ? <Component/> : <Spinner/>;\n    case 'confirmed':\n      return <Component/>;\n    case 'error':\n      return <ErrorMessage/>;\n    default:\n      throw new Error('Unexpected process state')\n  }\n}\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([])\n  const {getAllCharacters, process, setProcess} = useMarvelService()\n  const [newItemLoading, setNewItemLoading] = useState(false)\n  const [offset, setOffset] = useState(291);\n  const [charEnded, setCharEnded] = useState(false)\n\n  useEffect(() => {\n    onRequest(offset, true)\n  }, [])\n\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true)\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess('confirmed'))\n  }\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList([...charList, ...newCharList]);\n    setNewItemLoading(newItemLoading => false);\n    setOffset(offset => offset + 9);\n    setCharEnded(ended);\n  }\n\n  const itemRefs = useRef([])\n\n  const focusOnItem = (index) => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'))\n    itemRefs.current[index].classList.add('char__item_selected')\n    itemRefs.current[index].focus()\n  }\n\n\n  function renderItems(arr) {\n    const items = arr.map((item, index) => {\n      let imgStyle = item.thumbnail.includes('image_not_available') ? {objectFit: 'unset'} : {objectFit: 'cover'}\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames='char__item'>\n          <li\n            className='char__item'\n            tabIndex={0}\n            ref={el => itemRefs.current[index] = el}\n            onClick={() => {\n              props.onCharSelected(item.id)\n              focusOnItem(index)\n            }}\n            onKeyPress={(e) => {\n              e.preventDefault()\n              if (e.key === ' ' || e.key === \"Enter\") {\n                props.onCharSelected(item.id)\n                focusOnItem(index)\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      )\n    })\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>\n          {items}\n        </TransitionGroup>\n      </ul>\n    )\n  }\n\n  const elements = useMemo(()=>{\n    return setContent(process, () => renderItems(charList), newItemLoading)\n  }, [process])\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{display: charEnded ? 'none' : 'block'}}\n        onClick={() => onRequest(offset)}>\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  )\n}\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './charInfo.scss';\nimport {useEffect, useState} from \"react\";\nimport PropTypes from 'prop-types'\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst CharInfo = ({charId}) => {\n  const [char, setChar] = useState(null)\n  const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n  useEffect(() => {\n    updateChar()\n  }, [charId])\n\n\n  const updateChar = () => {\n    if (!charId) {\n      return;\n    }\n\n    clearError()\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(()=>setProcess('confirmed'))\n  }\n\n\n  const onCharLoaded = (char) => {\n    setChar(char)\n  }\n\n  return (\n    <div className=\"char__info\">\n      {setContent(process, View, char)}\n    </div>\n  )\n}\n\nconst View = ({data}) => {\n  const {name, description, thumbnail, homepage, wiki, comics} = data\n  let imgStyle = thumbnail.includes('image_not_available') ? {objectFit: 'contain'} : {objectFit: 'cover'}\n  comics.length = comics.length > 10 ? 10 : comics.length\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle}/>\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">\n        {description}\n      </div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {\n          !comics.length\n            ? 'There is no comics with this character'\n            : comics.map((com, i) => {\n              return (\n                <li key={i} className=\"char__comics-item\">\n                  {com.name}\n                </li>\n              )\n            })\n        }\n      </ul>\n    </>\n  )\n}\n\nCharInfo.propTypes = {\n  charId: PropTypes.number\n}\n\nexport default CharInfo;","import {Component} from 'react';\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: true,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage/>\r\n    }\r\n\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const {getCharacterByName, clearError,process, setProcess} = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  }\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(()=>setProcess('confirmed'));\r\n  }\r\n\r\n  const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n  const results = !char ? null : char.length > 0 ?\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n      <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div> :\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>;\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues = {{\r\n          charName: ''\r\n        }}\r\n        validationSchema = {Yup.object({\r\n          charName: Yup.string().required('This field is required')\r\n        })}\r\n        onSubmit = { ({charName}) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name='charName'\r\n              type='text'\r\n              placeholder=\"Enter name\"/>\r\n            <button\r\n              type='submit'\r\n              className=\"button button__main\"\r\n              disabled={process === 'loading'}>\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharSearchForm;","import React, {useState} from 'react';\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setSelectedChar] = useState(null)\r\n\r\n  const onCharSelected = (id) => {\r\n    setSelectedChar(id)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Marvel information portal\"\r\n        />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar/>\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected}/>\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar}/>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm/>\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default MainPage;"],"sourceRoot":""}