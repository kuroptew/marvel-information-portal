{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js","components/pages/404.js","components/pages/singleComicLayout/SingleComicLayout.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useState","comicsList","setComicsList","useMarvelService","getAllComics","setProcess","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","className","arr","items","map","c","index","to","id","src","thumbnail","alt","title","price","renderItems","disabled","style","onClick","ComicsPage","Helmet","name","content","AppBanner","path","element","img","display","width","height","objectFit","margin","useHttp","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","data","clearError","_apiBase","_apiKey","_baseOffset","getAllCharacters","res","results","_transformCharacter","getCharacterByName","getCharacter","_transformComics","getComic","char","description","extension","homepage","urls","wiki","comics","pageCount","language","textObjects","prices","Skeleton","Page404","SingleComicPage","View","imgStyle","href","RandomChar","setChar","updateChar","onCharLoaded","Math","floor","random","mjolnir","CharList","props","charList","setCharList","charEnded","setCharEnded","onCharListLoaded","newCharList","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","includes","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","preventDefault","key","TransitionGroup","component","com","i","CharInfo","charId","ErrorBoundary","state","error","errorInfo","this","setState","children","CharSearchForm","errorMessage","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","setSelectedChar","decoration","avengers","avengersLogo"],"mappings":"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","file":"static/js/5.2ea9b8e0.chunk.js","sourcesContent":["import './comicsList.scss';\nimport {useEffect, useState} from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport {Link} from \"react-router-dom\";\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList]=useState([]);\n    const {getAllComics, process, setProcess}=useMarvelService()\n    const [newItemLoading, setNewItemLoading] = useState(false)\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false)\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n          .then(onComicsListLoaded)\n          .then(()=>setProcess('confirmed'))\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList([...comicsList, ...newComicsList])\n        setNewItemLoading(newItemLoading => false)\n        setOffset(  offset=>offset + 8)\n        setComicsEnded(ended)\n    }\n\n    function renderItems(arr){\n        const items = arr.map((c, index)=>{\n            return (\n              <li className=\"comics__item\"\n                  key={index}>\n                  <Link to={`/comics/${c.id}`}>\n                      <img src={c.thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                      <div className=\"comics__item-name\">{c.title}</div>\n                      <div className=\"comics__item-price\">{c.price}</div>\n                  </Link>\n              </li>\n            )\n        })\n\n        return (\n          <ul className=\"comics__grid\">\n              {items}\n          </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, ()=>renderItems(comicsList), newItemLoading)}\n            <button\n              disabled={newItemLoading}\n              style={{'display' : comicsEnded ? 'none' : 'block'}}\n              className=\"button button__main button__long\"\n              onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import React from 'react';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport { Route, Routes} from \"react-router-dom\"\r\nimport {SingleComicPage} from \"./index\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Page with list of our comics\"\r\n        />\r\n        <title>Comics Page</title>\r\n      </Helmet>\r\n      <AppBanner/>\r\n      <ComicsList/>\r\n      <Routes>\r\n        <Route path=\":comicId\" element={<SingleComicPage/>}/>\r\n      </Routes>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img src={img} style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} alt='Error'/>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;","import {useState, useCallback} from \"react\";\r\n\r\nconst useHttp = () => {\r\n  const [process, setProcess] = useState('waiting')\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n    setProcess('loading')\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status:${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n\r\n      return data\r\n    } catch (e) {\r\n      setProcess('error')\r\n      throw e;\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setProcess('loading'), [])\r\n\r\n  return {request, clearError, process, setProcess}\r\n}\r\n\r\n\r\nexport default useHttp;","import useHttp from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const {process, request, clearError, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=008af015b2b2d7a8ef807f7c3395db16';\r\n  const _baseOffset = 228\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n    return _transformCharacter(res.data.results[0])\r\n  }\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n    return res.data.results.map(_transformComics)\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n    console.log(_transformComics(res.data.results[0]))\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description,\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n    }\r\n  }\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    getCharacter,\r\n    getAllCharacters,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName\r\n  }\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\n\r\nconst setContent =(process,Component, data)=>{\r\n  switch (process){\r\n    case 'waiting':\r\n      return <Skeleton/>;\r\n    case 'loading':\r\n      return <Spinner/>;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage/>;\r\n    default:\r\n      throw new Error('Unexpected process state')\r\n  }\r\n}\r\n\r\nexport default setContent;","import ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nconst Page404 = ()=>{\r\n  return(\r\n    <div>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"404 Marvel Page\"\r\n        />\r\n        <title>404 Marvel Page</title>\r\n      </Helmet>\r\n      <ErrorMessage/>\r\n      <p style={{'textAlign': 'center', 'fontWeight': 'bold', 'fontSize': '24px'}}>Page doesn't exist</p>\r\n      <Link style={{'display': 'block', 'textAlign': 'center', 'fontWeight': 'bold', 'fontSize': '24px', 'marginTop': '30px'}} to=\"/\">Back to main page</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Page404;","import {Link} from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport './singleComicLayout.scss'\r\n\r\nconst SingleComicPage = ({data}) => {\r\n  const {title, description, pageCount, thumbnail, language, price} = data\r\n\r\n  return (\r\n    <div className=\"single-comic\">\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content={`${title} comics book`}\r\n        />\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n      <div className=\"single-comic__info\">\r\n        <h2 className=\"single-comic__name\">{title}</h2>\r\n        <p className=\"single-comic__descr\">{description}</p>\r\n        <p className=\"single-comic__descr\">{pageCount}</p>\r\n        <p className=\"single-comic__descr\">Language: {language}</p>\r\n        <div className=\"single-comic__price\">{price}</div>\r\n      </div>\r\n      <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SingleComicPage;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport {useEffect, useState} from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({})\n  const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n  useEffect(() => {\n    updateChar()\n  }, [])\n\n  const onCharLoaded = (char) => {\n    setChar(char)\n  }\n\n  const updateChar = () => {\n    clearError()\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(()=>setProcess('confirmed'))\n  }\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!<br/>\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">\n          Or choose another one\n        </p>\n        <button className=\"button button__main\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n      </div>\n    </div>\n  )\n}\n\nconst View = ({data}) => {\n  const {name, description, thumbnail, homepage, wiki} = data;\n  let imgStyle = {'objectFit' : 'cover'};\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = {'objectFit' : 'contain'};\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">\n          {description}\n        </p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RandomChar;","import './charList.scss';\nimport {useState, useEffect, useRef, useMemo} from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport PropTypes from \"prop-types\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner/>;\n    case 'loading':\n      return newItemLoading ? <Component/> : <Spinner/>;\n    case 'confirmed':\n      return <Component/>;\n    case 'error':\n      return <ErrorMessage/>;\n    default:\n      throw new Error('Unexpected process state')\n  }\n}\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([])\n  const {getAllCharacters, process, setProcess} = useMarvelService()\n  const [newItemLoading, setNewItemLoading] = useState(false)\n  const [offset, setOffset] = useState(291);\n  const [charEnded, setCharEnded] = useState(false)\n\n  useEffect(() => {\n    onRequest(offset, true)\n  }, [])\n\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true)\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess('confirmed'))\n  }\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList([...charList, ...newCharList]);\n    setNewItemLoading(newItemLoading => false);\n    setOffset(offset => offset + 9);\n    setCharEnded(ended);\n  }\n\n  const itemRefs = useRef([])\n\n  const focusOnItem = (index) => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'))\n    itemRefs.current[index].classList.add('char__item_selected')\n    itemRefs.current[index].focus()\n  }\n\n\n  function renderItems(arr) {\n    const items = arr.map((item, index) => {\n      let imgStyle = item.thumbnail.includes('image_not_available') ? {objectFit: 'unset'} : {objectFit: 'cover'}\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames='char__item'>\n          <li\n            className='char__item'\n            tabIndex={0}\n            ref={el => itemRefs.current[index] = el}\n            onClick={() => {\n              props.onCharSelected(item.id)\n              focusOnItem(index)\n            }}\n            onKeyPress={(e) => {\n              e.preventDefault()\n              if (e.key === ' ' || e.key === \"Enter\") {\n                props.onCharSelected(item.id)\n                focusOnItem(index)\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      )\n    })\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>\n          {items}\n        </TransitionGroup>\n      </ul>\n    )\n  }\n\n  const elements = useMemo(()=>{\n    return setContent(process, () => renderItems(charList), newItemLoading)\n  }, [process])\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{display: charEnded ? 'none' : 'block'}}\n        onClick={() => onRequest(offset)}>\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  )\n}\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './charInfo.scss';\nimport {useEffect, useState} from \"react\";\nimport PropTypes from 'prop-types'\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst CharInfo = ({charId}) => {\n  const [char, setChar] = useState(null)\n  const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n  useEffect(() => {\n    updateChar()\n  }, [charId])\n\n\n  const updateChar = () => {\n    if (!charId) {\n      return;\n    }\n\n    clearError()\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(()=>setProcess('confirmed'))\n  }\n\n\n  const onCharLoaded = (char) => {\n    setChar(char)\n  }\n\n  return (\n    <div className=\"char__info\">\n      {setContent(process, View, char)}\n    </div>\n  )\n}\n\nconst View = ({data}) => {\n  const {name, description, thumbnail, homepage, wiki, comics} = data\n  let imgStyle = thumbnail.includes('image_not_available') ? {objectFit: 'contain'} : {objectFit: 'cover'}\n  comics.length = comics.length > 10 ? 10 : comics.length\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle}/>\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">\n        {description}\n      </div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {\n          !comics.length\n            ? 'There is no comics with this character'\n            : comics.map((com, i) => {\n              return (\n                <li key={i} className=\"char__comics-item\">\n                  {com.name}\n                </li>\n              )\n            })\n        }\n      </ul>\n    </>\n  )\n}\n\nCharInfo.propTypes = {\n  charId: PropTypes.number\n}\n\nexport default CharInfo;","import {Component} from 'react';\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: true,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage/>\r\n    }\r\n\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const {getCharacterByName, clearError,process, setProcess} = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  }\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(()=>setProcess('confirmed'));\r\n  }\r\n\r\n  const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n  const results = !char ? null : char.length > 0 ?\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n      <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div> :\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>;\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues = {{\r\n          charName: ''\r\n        }}\r\n        validationSchema = {Yup.object({\r\n          charName: Yup.string().required('This field is required')\r\n        })}\r\n        onSubmit = { ({charName}) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name='charName'\r\n              type='text'\r\n              placeholder=\"Enter name\"/>\r\n            <button\r\n              type='submit'\r\n              className=\"button button__main\"\r\n              disabled={process === 'loading'}>\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharSearchForm;","import React, {useState} from 'react';\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setSelectedChar] = useState(null)\r\n\r\n  const onCharSelected = (id) => {\r\n    setSelectedChar(id)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Marvel information portal\"\r\n        />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar/>\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected}/>\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar}/>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm/>\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}